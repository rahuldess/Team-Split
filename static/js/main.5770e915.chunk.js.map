{"version":3,"sources":["Checkbox.js","Teams.js","Util.js","App.js","serviceWorker.js","index.js"],"names":["PlayerBox","label","isSelected","onCheckboxChange","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","color","name","useStyles","makeStyles","table","maxWidth","float","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","Teams","totalPlayers","classes","finalTeam","totalPlayersCount","length","totalPlayersWeight","reduce","total","player","weight","teamAPlayersCount","Math","ceil","teamAWeight","floor","weightsAList","array","sum","result","fork","i","s","t","concat","push","getSubsets","selectedPlayers","map","a","weightsArray","filter","subset","randomSubset","random","clonedPlayers","slice","forEach","item","index","inx","findIndex","splice","otherArray","results","current","other","teamA","teamB","team","TableContainer","component","Paper","style","Table","className","size","aria-label","TableHead","TableRow","TableBody","tableBody","row","key","scope","state","checkboxes","PLAYERS","process","App","createCheckboxes","createCheckbox","selectAll","selectAllCheckboxes","deSelectAll","setState","prevState","Object","assign","handleCheckboxChange","changeEvent","playerName","target","playersIndex","pilayer","AppBar","position","Toolbar","Typography","variant","Box","display","justifyContent","alignItems","mb","mt","this","Util","Divider","light","align","fontFamily","fontWeight","m","maxHeight","overflow","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5770e915.chunk.js","sourcesContent":["import React from \"react\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst PlayerBox = ({ label, isSelected, onCheckboxChange }) => (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox \n            checked={isSelected}\n            onChange={onCheckboxChange}\n            color=\"primary\"\n            name={label}/>\n        }\n        label={label}\n      />\n    </FormGroup>\n);\n\nexport default PlayerBox;\n","import React from 'react';\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    maxWidth: 150,\n    float: 'left'\n  }\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction getSubsets(array, sum) {\n  function fork(i = 0, s = 0, t = []) {\n    if (s === sum) {\n      result.push(t);\n      return;\n    }\n\n    if (i === array.length) {\n      return;\n    }\n\n    if (s + array[i] <= sum) { // shout circuit for positive numbers only\n      fork(i + 1, s + array[i], t.concat(array[i]));\n    }\n\n    fork(i + 1, s, t);\n  }\n\n  var result = [];\n  fork();\n  return result;\n}\n\nfunction comparer(otherArray){\n  return function(current){\n    return otherArray.filter(function(other){\n      return other.name == current.name && other.weight == current.weight\n    }).length == 0;\n  }\n}\n\nconst weightsArray = (selectedPlayers) => {\n  return selectedPlayers.map(a => a.weight);\n}\n\nconst team = (totalPlayers) => {\n  var totalPlayers         = totalPlayers[\"totalPlayers\"];\n  const totalPlayersCount  = totalPlayers.length;\n  const totalPlayersWeight = totalPlayers.reduce(function(total, player) { return total + player.weight; }, 0);\n  const teamAPlayersCount  = Math.ceil(totalPlayersCount / 2);\n  const teamBPlayersCount  = totalPlayers - teamAPlayersCount;\n\n  // Using .floor here because team with 1 extra player should have\n  // one less weak player comparitively.\n  const teamAWeight  = Math.floor(totalPlayersWeight / 2);\n  const teamBWeight  = totalPlayersWeight - teamAWeight;\n  const weightsAList = getSubsets(weightsArray(totalPlayers), teamAWeight).filter(subset => subset.length === teamAPlayersCount)\n  const randomSubset = weightsAList[Math.floor(Math.random() * weightsAList.length)];\n  const clonedPlayers   = totalPlayers.slice();\n\n  randomSubset.forEach(function(item, index) {\n    const inx = clonedPlayers.findIndex(player => player.weight == item)\n\n    if (inx > -1) {\n      clonedPlayers.splice(inx, 1);\n    }\n  });\n\n  const results = totalPlayers.filter(comparer(clonedPlayers));\n\n  return { teamA: clonedPlayers, teamB: results }\n}\n\nexport default function Teams(totalPlayers) {\n  const classes   = useStyles();\n  const finalTeam = team(totalPlayers);\n  const teamA     = finalTeam.teamA;\n  const teamB     = finalTeam.teamB;\n\n  return (\n    <TableContainer component={Paper} style={{ maxWidth: 300 }}>\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Team Red </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.tableBody}>\n          {teamA.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Team Blue </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.tableBody}>\n          {teamB.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react';\n\nexport const hasMinPlayersSelected = (state) => {\n  return selectedPlayers(state).length >= 8;\n}\n\nexport const selectedPlayers = (state) => {\n  return state.checkboxes.filter(player => player.checked == true)\n}\n\n","import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport SportsSoccerIcon from '@material-ui/icons/SportsSoccer';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\n\nimport Checkbox from './Checkbox'\nimport Teams from './Teams'\nimport * as Util from './Util'\n\nconst PLAYERS = process.env.PLAYERS;\n\nclass App extends Component {\n  state = {\n    checkboxes: PLAYERS \n  }\n\n  createCheckboxes = () => PLAYERS.map(player => this.createCheckbox(player));\n  selectAll        = () => this.selectAllCheckboxes(true);\n  deSelectAll      = () => this.selectAllCheckboxes(false);\n\n  selectAllCheckboxes = isSelected => {\n    this.setState(function(prevState) {\n      return {\n        checkboxes: prevState.checkboxes.map(player => (\n            Object.assign(player, { checked: isSelected }) \n          )\n        )\n      }\n    })\n  };\n\n  handleCheckboxChange = changeEvent => {\n    const playerName   = changeEvent.target.name;\n\n    this.setState(function(prevState) {\n      return {\n        checkboxes: prevState.checkboxes.map(player => (\n          player.name === playerName ? \n            Object.assign(player, { checked: !player.checked }) \n            :\n            player\n          )\n        )\n      }\n    })\n  };\n\n  createCheckbox = player => {\n    const playersIndex = this.state.checkboxes.findIndex(pilayer => pilayer.name === player.name);\n\n    return(\n      <Checkbox\n        label={player.name}\n        isSelected={this.state.checkboxes[playersIndex].checked}\n        onCheckboxChange={this.handleCheckboxChange}\n        key={player.name}\n      />\n    )\n  };\n\n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\"> \n              Burnaby FC <SportsSoccerIcon/>\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mb={2} mt={2}>\n          { Util.hasMinPlayersSelected(this.state) ?  <Teams totalPlayers={Util.selectedPlayers(this.state)} /> : null }\n        </Box>\n\n        <Divider light/>\n        <Typography component=\"div\" align=\"center\">\n          <Box fontSize=\"h3.fontSize\" fontFamily=\"Monospace\" fontWeight=\"fontWeightBold\" m={1}>\n            Players\n          </Box>\n        </Typography>\n        <Divider light/>\n\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt={4} mb={5} style={{ maxHeight: 400, overflow: 'auto' }}>\n          <div>\n            {this.createCheckboxes()}\n          </div>\n        </Box>\n\n        <div align=\"center\">\n          <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={this.selectAll}> Select All </Button>&nbsp;&nbsp;\n          <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={this.deSelectAll}> Deselect All </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}